# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Static pages
GET          /api                                       controllers.StaticController.api

# Statistics API
GET          /api/stats                                 controllers.StatisticController.getStatistics()

# Reports list API
GET          /api/reports                               controllers.ReportListController.getReports(offset: Option[Long], limit: Option[Int], departments: Option[String], email: Option[String], siret: Option[String], companyName: Option[String], start: Option[String], end: Option[String], category: Option[String], status: Option[String], details: Option[String])
GET          /api/reports/extract                       controllers.ReportListController.extractReports(departments: Option[String], siret: Option[String], start: Option[String], end: Option[String], category: Option[String], status: Option[String], details: Option[String])

# Report API
GET          /api/reports/files/:uuid/:filename         controllers.ReportController.downloadReportFile(uuid, filename)
DELETE       /api/reports/files/:uuid/:filename         controllers.ReportController.deleteReportFile(uuid, filename)
POST         /api/reports/files                         controllers.ReportController.uploadReportFile()
GET          /api/reports/siret/:siret/count            controllers.ReportController.getReportCountBySiret(siret: String)

GET          /api/reports/:uuid                         controllers.ReportController.getReport(uuid)
DELETE       /api/reports/:uuid                         controllers.ReportController.deleteReport(uuid)

POST         /api/reports                               controllers.ReportController.createReport()
PUT          /api/reports                               controllers.ReportController.updateReport()
POST         /api/reports/:uuid/response                controllers.ReportController.reportResponse(uuid)

GET          /api/nbReportsGroupByCompany               controllers.ReportController.getNbReportsGroupByCompany(offset: Option[Long], limit: Option[Int])

# Events API
GET         /api/reports/:uuid/events                   controllers.ReportController.getEvents(uuid, eventType: Option[String])
POST        /api/reports/:uuid/events                   controllers.ReportController.createEvent(uuid)

# Constants API
GET         /api/constants/actions                      controllers.ConstantController.getActions()
GET         /api/constants/reportStatus                 controllers.ConstantController.getReportStatus()

# Company API
GET         /api/companies/suggest/:search              controllers.CompanyController.getSuggestions(search)
GET         /api/companies/nearby/                      controllers.CompanyController.getAllNearbyCompanies(lat, long, radius: Double ?= 0.2, maxCount: Int ?= 10)
GET         /api/companies/siret/:siret                 controllers.CompanyController.getCompaniesBySiret(siret, maxCount: Int ?= 10)
GET         /api/companies/:search                      controllers.CompanyController.getCompanies(search, postalCode: Option[String], maxCount: Int ?= 10)

# Authentication API
POST	    /api/authenticate                           controllers.AuthController.authenticate
POST	    /api/authenticate/password/forgot           controllers.AuthController.forgotPassword
POST	    /api/authenticate/password/reset            controllers.AuthController.resetPassword(token: java.util.UUID)

# Accesses API
GET         /api/accesses/:siret                        controllers.CompanyAccessController.listAccesses(siret: String)
GET         /api/accesses/:siret/token                  controllers.CompanyAccessController.fetchTokenInfo(siret: String, token: String)
POST        /api/accesses/:siret/invitation             controllers.CompanyAccessController.sendInvitation(siret: String)

# Account API
POST        /api/account/password                       controllers.AccountController.changePassword
POST        /api/account/activation                     controllers.AccountController.activateAccount
PUT         /api/account/activation                     controllers.AccountController.activateAccountDeprecated
GET         /api/account/:siret/document/activation     controllers.AccountController.getActivationDocument(siret)

# Rating API
POST        /api/rating                                 controllers.RatingController.rate

# Subscription API
GET         /api/subscriptions                          controllers.SubscriptionController.getSubscriptions
POST        /api/subscriptions                          controllers.SubscriptionController.subscribe

GET         /assets/*file                               controllers.Assets.versioned(path="/public", file: Asset)


